{"version":3,"sources":["context/appContext.js","context/appProvider.js","Components/Button.js","Components/CountDown.js","Components/Setting.js","Pages/Main.js","App.js","reportWebVitals.js","index.js"],"names":["appContext","createContext","Provider","children","useState","workTime","setWorkTime","relaxTime","setRelaxTime","contextValue","hideSetting","setHideSetting","value","Button","title","className","onClick","CountDown","useContext","Paused","setPaused","mode","setMode","TimeLeft","setTimeLeft","TimeLeftRef","useRef","PausedRef","modeRef","WorkBreak","nextMode","current","nextSeconds","useEffect","timeDealer","setInterval","clearInterval","total","graph","Math","round","minutos","floor","segundos","text","styles","buildStyles","textColor","pathColor","tailColor","style","marginTop","Setting","ReactSlider","thumbClassName","trackClassName","onChange","e","min","max","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a8beb46.chunk.js","sourcesContent":["/* eslint-disable */\nimport { createContext } from 'react';\n\nconst appContext = createContext();\n\nexport default appContext;\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport appContext from './appContext';\n\nfunction Provider({ children }) {\n  const [workTime, setWorkTime] = useState(25)\n  const [relaxTime, setRelaxTime ] = useState(5)\n  const [hideSetting, setHideSetting] = useState(true)\n\n  const contextValue = {\n   workTime,\n   relaxTime,\n   setWorkTime,\n   setRelaxTime,\n   hideSetting,\n   setHideSetting\n  };\n\n  return (\n    <appContext.Provider value={ contextValue }>\n      {children}\n    </appContext.Provider>\n  );\n}\n\nexport default Provider;\n\nProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n","import React from 'react';\n\nfunction Button({title, className, onClick}) {\n  return (\n    <div>\n      <button\n      className={className}\n      onClick={onClick}\n      >{title}\n      </button>\n    </div>\n  );\n}\n\nexport default Button;\n","import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Button from '../Components/Button'\nimport {useContext, useState, useEffect, useRef} from \"react\";\nimport appContext from '../context/appContext';\nimport '../Styles/CountDown.css'\n\nfunction CountDown() {\n  const {\n    workTime,\n    relaxTime,\n    setHideSetting, \n  } = useContext(appContext);\n\n  const [Paused, setPaused] = useState(false);\n  const [mode, setMode] = useState('work')\n  const [TimeLeft, setTimeLeft] = useState(0);\n\n  const TimeLeftRef = useRef(TimeLeft);\n  const PausedRef = useRef(Paused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    TimeLeftRef.current--;\n    setTimeLeft(TimeLeftRef.current);\n  }\n\n  function WorkBreak() {\n    const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n    const nextSeconds = (nextMode === 'work' ? workTime : relaxTime) * 60;\n\n    setMode(nextMode);\n    modeRef.current = nextMode;\n\n    setTimeLeft(nextSeconds);\n    TimeLeftRef.current = nextSeconds;\n  }\n\n  useEffect(() => {\n\n    WorkBreak()\n\n    TimeLeftRef.current = workTime * 60;\n    setTimeLeft(TimeLeftRef.current);\n\n    const timeDealer = setInterval(() => {\n      if (PausedRef.current) {\n        return;\n      }\n      if (TimeLeftRef.current === 0) {\n        return WorkBreak();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(timeDealer);\n  }, [workTime]);\n\n  const total = mode === 'work'\n    ? workTime * 60\n    : relaxTime * 60;\n  const graph = Math.round(TimeLeft / total * 100);\n\n  const minutos = Math.floor(TimeLeft / 60);\n  let segundos = TimeLeft % 60;\n  if(segundos < 10) segundos = '0'+segundos;\n\n  return (\n    <div className='countDown'>\n      <CircularProgressbar\n        value={graph}\n        text={minutos + ':' + segundos}\n        styles={buildStyles({\n        textColor:'black',\n        pathColor:mode === 'work' ? '#00d35f' : 'red',\n        tailColor:'black',\n      })} />\n      <div style={{marginTop:'20px'}}>\n        {Paused\n          ? <Button \n          title='Começar'\n          className='BtnStart'\n          onClick={() => { setPaused(false); PausedRef.current = false; }} />\n          : <Button \n          className='BtnPause'\n            title='Parar'\n          onClick={() => { setPaused(true); PausedRef.current = true; }} />}\n      </div>\n      <div style={{marginTop:'20px'}}>\n        <Button\n        title='Configurações'\n        className='Config'\n        onClick={() => setHideSetting(true)} />\n      </div>\n      <Button\n        title='Zerar'\n        className='Zerar'\n        onClick={() => setTimeLeft(25 * 60)} />\n    </div>\n  );\n}\n\nexport default CountDown;\n\n","import React, { useContext } from 'react';\nimport ReactSlider from 'react-slider'\nimport appContext from '../context/appContext';\nimport '../Styles/Setting.css'\nimport Button from './Button';\n\nexport default function Setting() {\n\n  const {workTime, relaxTime, setWorkTime, setRelaxTime, setHideSetting} = useContext(appContext)\n\n  return (\n    <div className='sliders-container'>\n      <label className='label-work'> Trabalhar : { workTime } minutos </label>\n        <ReactSlider \n        className='minute-slider'\n        thumbClassName='thumb'\n        trackClassName='track'\n        value={ workTime }\n        onChange={(e) => setWorkTime(e)}\n        min={1}\n        max={60}\n        />\n\n      <label className='label-work'> Descançar : { relaxTime } minutos </label>\n        <ReactSlider \n        className='break-slider'\n        thumbClassName='thumb'\n        trackClassName='track'\n        value={ relaxTime }\n        onChange={(e) => setRelaxTime(e)}\n        min={1}\n        max={60}\n        />\n        <Button \n        title='Voltar'\n        onClick={() => setHideSetting(false)}\n        className='SettingButton'\n        />\n    </div>\n  );\n}\n\n","import React, { useContext } from 'react';\nimport CountDown from '../Components/CountDown';\nimport Setting from '../Components/Setting';\nimport appContext from '../context/appContext';\n\nfunction Main() {\n  const { hideSetting } = useContext(appContext)\n\n  return (\n    <div>\n      { !hideSetting ?\n      <CountDown /> :\n      <Setting />\n      }\n      </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Provider from './context/appProvider';\nimport Main from './Pages/Main';\nfunction App() {\n  return (\n   <div>\n     <Provider>\n     <Main /> \n     </Provider>\n   </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}